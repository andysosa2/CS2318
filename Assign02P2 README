Fill in the "holes" intentionally left in a3p2.asm (one of the supplied files) so that the completed program will work as illustrated by the sample test run result (a3p2test.txt).
NOTE1: This program is the Assignment 2 Part 3 program re-structured (and made modular) using functions.
NOTE2: The last test case of a2p3test.txt has been replaced by 2 different ones in a3p2test.txt.
IMPORTANT Specific Requirements  
(CAUTION: You will receive little or no credits if you don't observe these.)
	In general, MUST follow the function-call convention studied in class.
	In MakeAM1D:
-- MUST  use $s1 (a callee-saved register) for found.  
(An entry corresponding to this usage has already been entered for you under Register usage:)
	In ShiftLeftBy1:
-- MUST  use $s1 (a callee-saved register) for valOfEle.  
(An entry corresponding to this usage has already been entered for you under Register usage:)
	In MakeAM1D:
-- MUST  use $t1 (a caller-saved register) for hopPtr1.  
(An entry corresponding to this usage has already been entered for you under Register usage:)
	In ShiftLeftBy1:
-- MUST  use $t1 (a caller-saved register) for elePtr.  
(An entry corresponding to this usage has already been entered for you under Register usage:)
	When a function must save copies of its arguments that are received via registers, it must do so using the designated slots (according to function-call convention) in the caller's stack frame (NOT in some other available registers or memory locations).
	A function must NOT access memory locations (outside of its stack frame) through "back-door" means. 

In other words, there must NOT be any accesses of memory locations (outside of a function's own stack frame) that are inconsistent with function-call convention and/or the intent of the caller.
For the function-call convention studied, a function may access memory locations outside of it's own stack frame only under the following situations (talk to me if you think there are still others):
accessing designated slots in caller's frame to save copies of the first 4 arguments (which are passed via registers $a0 through $a3) where appropriate/needed.
(NOTE: According to convention, this part of caller's frame is allocated by caller not for its own use but for its callee to use where needed.)
accessing designated slots in caller's frame to retrieve 5th-and-beyond arguments (which are passed via the stack) where appropriate.
accessing other parts of the stack as intended by the caller, through address(es) passed to it by the caller.
Other points to note:
 		Assign03P2_StackFrameDetails.pdf (one of the supplied files) has all the stack frame designs. 
(You are strongly encouraged to do the stack frame designs yourself and then compare what you got with the supplied. This should serve as part of your preparation for the final exam.)
(You should at least study and understand the supplied.)
The stack frame designs were obtained taking into account various factors (local storage, register usage, function arguments, need for saving/restoring register contents, . . .).
They should therefore serve as good additional stack-frame-design examples.
(You MUST use the supplied designs when filling in the required code.)
	a3p2.cpp (one of the supplied files) is the corresponding program in C++ in case you find it useful as a reference.
	Each hole that you must fill is indicated by a comment line that looks like
####################(50)####################
The number within the parentheses indicates the number of statements used in my (first-cut, un-optimized) solution, not counting any labels that are placed on separate lines. 
It is not necessary that you use the same number of statements but something is probably amiss if you deviate too far from the number.
Below are the functions that have hole(s) in them: 
- main (in call to ProcArrays) 
- ShiftLeftBy1 (just about the entire function) 
- MakeAM1D (just about the entire function) 
- CalcTruncAvg (just about the entire function) 
- CalcA2A3 (just about the entire function) 
- ProcArrays (in calls to MakeAM1D, ShowArrayLabeled, CalcTruncAvg and CalcA2A3)
	I have decided to leave behind the entire register-usage documentation of my solution (listed under Register usage:, including the $s1 and $t1 that you are required to use in MakeAM1D and ShiftLeftBy1). 
You should adopt the same register usage, both to save yourself some time and simplify my task of checking/grading your work.
	Most functions (including ShiftLeftBy1 and CalcTruncAvg, the code for which you must fill in) have "clobbering of caller-saved" code that looks like the following


#########################################
# deliberate clobbering of caller-saved
# (meant to catch improper presumptions -
# no effect if no such presumptions made)
#########################################
            li $a0, 999999999
            li $a1, 999999999
            li $a2, 999999999
            li $a3, 999999999
            li $t0, 999999999
            li $t1, 999999999
            li $t2, 999999999
            li $t3, 999999999
            li $t4, 999999999
            li $t5, 999999999
            li $t6, 999999999
            li $t7, 999999999
            li $t8, 999999999
            li $t9, 999999999
            li $v0, 999999999
            li $v1, 999999999
#########################################
deliberately inserted immediately before the functions return.
You MUST leave such code alone; as indicated in the comment, if such code causes your program to not work properly, you have made some improper presumptions when filling in your code.
	When filling a hole that involves just about the entire function, you would want to intersperse your code among the commented-out C++ statements (like how I did for other functions).
	When debugging, you may want to enable (i.e., uncomment) the following line in ProcArrays: 
- #j begDebugCalcTruncAvg 
It will run some code to display the value of TruncAvg after the CalcTruncAvg call.
